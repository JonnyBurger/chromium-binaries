diff --git a/chrome/browser/chrome_content_browser_client.cc b/chrome/browser/chrome_content_browser_client.cc
index 4db3794514..efc5642450 100644
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -206,7 +206,6 @@
 #include "chrome/common/chrome_paths.h"
 #include "chrome/common/chrome_paths_internal.h"
 #include "chrome/common/chrome_switches.h"
-#include "chrome/common/crash_keys.h"
 #include "chrome/common/env_vars.h"
 #include "chrome/common/google_url_loader_throttle.h"
 #include "chrome/common/logging_chrome.h"
@@ -2740,7 +2739,6 @@ void MaybeAppendBlinkSettingsSwitchForFieldTrial(
 void ChromeContentBrowserClient::AppendExtraCommandLineSwitches(
     base::CommandLine* command_line,
     int child_process_id) {
-  crash_keys::AppendStringAnnotationsCommandLineSwitch(command_line);
 #if BUILDFLAG(IS_MAC)
   std::unique_ptr<metrics::ClientInfo> client_info =
       GoogleUpdateSettings::LoadMetricsClientInfo();
diff --git a/chrome/common/crash_keys.cc b/chrome/common/crash_keys.cc
index d9c721376c..1c3a7ca221 100644
--- a/chrome/common/crash_keys.cc
+++ b/chrome/common/crash_keys.cc
@@ -16,7 +16,6 @@
 #include "base/command_line.h"
 #include "base/format_macros.h"
 #include "base/no_destructor.h"
-#include "base/strings/strcat.h"
 #include "base/strings/string_split.h"
 #include "base/strings/string_util.h"
 #include "base/strings/stringprintf.h"
@@ -37,8 +36,6 @@
 namespace crash_keys {
 namespace {
 
-constexpr std::string_view kStringAnnotationsSwitch = "string-annotations";
-
 // A convenient wrapper around a crash key and its name.
 //
 // The CrashKey contract requires that CrashKeyStrings are never
@@ -55,8 +52,6 @@ class CrashKeyWithName {
   CrashKeyWithName& operator=(CrashKeyWithName&&) = delete;
   ~CrashKeyWithName() = delete;
 
-  std::string_view Name() const { return name_; }
-  std::string_view Value() const { return crash_key_.value(); }
   void Clear() { crash_key_.Clear(); }
   void Set(std::string_view value) { crash_key_.Set(value); }
 
@@ -112,8 +107,7 @@ void HandleEnableDisableFeatures(const base::CommandLine& command_line) {
 
 // Return true if we DON'T want to upload this flag to the crash server.
 bool IsBoringSwitch(const std::string& flag) {
-  static const std::string_view kIgnoreSwitches[] = {
-    kStringAnnotationsSwitch,
+  static const char* const kIgnoreSwitches[] = {
     switches::kEnableLogging,
     switches::kFlagSwitchesBegin,
     switches::kFlagSwitchesEnd,
@@ -171,50 +165,9 @@ bool IsBoringSwitch(const std::string& flag) {
   return false;
 }
 
-std::deque<CrashKeyWithName>& GetCommandLineStringAnnotations() {
-  static base::NoDestructor<std::deque<CrashKeyWithName>>
-      command_line_string_annotations;
-  return *command_line_string_annotations;
-}
-
-void SetStringAnnotations(const base::CommandLine& command_line) {
-  // This is only meant to be used to pass annotations from the browser to
-  // children and not to be used on the browser command line.
-  if (!command_line.HasSwitch(switches::kProcessType)) {
-    return;
-  }
-  base::StringPairs annotations;
-  if (!base::SplitStringIntoKeyValuePairs(
-          command_line.GetSwitchValueASCII(kStringAnnotationsSwitch), '=', ',',
-          &annotations)) {
-    return;
-  }
-  for (const auto& [key, value] : annotations) {
-    GetCommandLineStringAnnotations().emplace_back(key).Set(value);
-  }
-}
-
 }  // namespace
 
-void AllocateCrashKeyInBrowserAndChildren(std::string_view key,
-                                          std::string_view value) {
-  GetCommandLineStringAnnotations().emplace_back(std::string(key)).Set(value);
-}
-
-void AppendStringAnnotationsCommandLineSwitch(base::CommandLine* command_line) {
-  std::string string_annotations;
-  for (const auto& crash_key : GetCommandLineStringAnnotations()) {
-    if (!string_annotations.empty()) {
-      string_annotations.push_back(',');
-    }
-    string_annotations = base::StrCat(
-        {string_annotations, crash_key.Name(), "=", crash_key.Value()});
-  }
-  command_line->AppendSwitchASCII(kStringAnnotationsSwitch, string_annotations);
-}
-
 void SetCrashKeysFromCommandLine(const base::CommandLine& command_line) {
-  SetStringAnnotations(command_line);
   HandleEnableDisableFeatures(command_line);
   SetSwitchesFromCommandLine(command_line, &IsBoringSwitch);
 }
diff --git a/chrome/common/crash_keys.h b/chrome/common/crash_keys.h
index a274b3e364..710f553034 100644
--- a/chrome/common/crash_keys.h
+++ b/chrome/common/crash_keys.h
@@ -5,28 +5,14 @@
 #ifndef CHROME_COMMON_CRASH_KEYS_H_
 #define CHROME_COMMON_CRASH_KEYS_H_
 
-#include <string_view>
-
 namespace base {
 class CommandLine;
 }
 
 namespace crash_keys {
 
-// This function is only expected to be called in the browser process. Allocates
-// a crash key in this process. The (key, value) pair will be included in the
-// switch value set by AppendStringAnnotationsCommandLineSwitch().
-void AllocateCrashKeyInBrowserAndChildren(std::string_view key,
-                                          std::string_view value);
-
-// Extends `command_line` with a switch containing crash key values allocated by
-// AllocateCrashKeyInBrowserAndChildren() which can be consumed by
-// SetCrashKeysFromCommandLine().
-void AppendStringAnnotationsCommandLineSwitch(base::CommandLine* command_line);
-
 // Sets the kNumSwitches key and the set of keys named using kSwitchFormat based
-// on the given `command_line`. For non-browser processes, allocates crash keys
-// from the switch value set by AppendStringAnnotationsCommandLineSwitch().
+// on the given |command_line|.
 void SetCrashKeysFromCommandLine(const base::CommandLine& command_line);
 
 }  // namespace crash_keys
diff --git a/chrome/common/crash_keys_unittest.cc b/chrome/common/crash_keys_unittest.cc
index 73a6ebdee0..76ba0caf94 100644
--- a/chrome/common/crash_keys_unittest.cc
+++ b/chrome/common/crash_keys_unittest.cc
@@ -84,48 +84,6 @@ void InitFromArgv(base::CommandLine& command_line,
 
 }  // namespace
 
-TEST_F(CrashKeysTest, AllocateCrashKeyInBrowserAndChildren) {
-  crash_keys::AllocateCrashKeyInBrowserAndChildren("annotation-name",
-                                                   "annotation-value");
-  crash_keys::AllocateCrashKeyInBrowserAndChildren("another-name",
-                                                   "another-value");
-
-  EXPECT_EQ("annotation-value", GetCrashKeyValue("annotation-name"));
-  EXPECT_EQ("another-value", GetCrashKeyValue("another-name"));
-
-  base::CommandLine command_line(base::CommandLine::NO_PROGRAM);
-  InitFromArgv(command_line, {"program_name", "--type=renderer"});
-
-  crash_keys::AppendStringAnnotationsCommandLineSwitch(&command_line);
-  EXPECT_EQ("annotation-name=annotation-value,another-name=another-value",
-            command_line.GetSwitchValueASCII("string-annotations"));
-
-}
-
-TEST_F(CrashKeysTest, SetStringAnnotationsBrowser) {
-  base::CommandLine command_line(base::CommandLine::NO_PROGRAM);
-  InitFromArgv(command_line, {"program_name",
-                              "--string-annotations=annotation-name=annotation-"
-                              "value,another-annotation=another-value"});
-
-  crash_keys::SetCrashKeysFromCommandLine(command_line);
-
-  EXPECT_EQ("", GetCrashKeyValue("annotation-name"));
-  EXPECT_EQ("", GetCrashKeyValue("another-annotation"));
-}
-
-TEST_F(CrashKeysTest, SetStringAnnotationsNonBrowser) {
-  base::CommandLine command_line(base::CommandLine::NO_PROGRAM);
-  InitFromArgv(command_line, {"program_name", "--type=renderer",
-                              "--string-annotations=annotation-name=annotation-"
-                              "value,another-annotation=another-value"});
-
-  crash_keys::SetCrashKeysFromCommandLine(command_line);
-
-  EXPECT_EQ("annotation-value", GetCrashKeyValue("annotation-name"));
-  EXPECT_EQ("another-value", GetCrashKeyValue("another-annotation"));
-}
-
 TEST_F(CrashKeysTest, EnabledDisabledFeaturesFlags) {
   base::CommandLine command_line(base::CommandLine::NO_PROGRAM);
   InitFromArgv(
