name: Package
description: Package Chromium
inputs:
  architecture:
    required: true
    type: string
  al_version:
    required: true
    type: string
runs:
  using: composite
  steps:
    - name: Determine version
      shell: bash
      run: echo "VERSION=$(sed --regexp-extended 's~[^0-9]+~~g' chrome/VERSION | tr '\n' '.' | sed 's~[.]$~~')" >> $GITHUB_ENV
      working-directory: /home/runner/src
    - run: |
        mkdir -p "${HOME}/build/system"
        cp /usr/lib64/libdbus-1.so.3 "${HOME}/build/system"
        cp /usr/lib64/liblzma.so.5 "${HOME}/build/system"
        cp /usr/lib64/libnss3.so "${HOME}/build/system"
        cp /usr/lib64/libsmime3.so "${HOME}/build/system"
        cp /usr/lib64/libsoftokn3.so "${HOME}/build/system"
        cp /usr/lib64/libsystemd.so.0 "${HOME}/build/system"
    - run: |
        cp /usr/lib64/libdw.so.1 "${HOME}/build/system"
        cp /usr/lib64/libelf.so.1 "${HOME}/build/system"
        cp /usr/lib64/libgcrypt.so.11 "${HOME}/build/system"
        cp /usr/lib64/libgpg-error.so.0 "${HOME}/build/system"
        cp /usr/lib64/liblz4.so.1 "${HOME}/build/system"
        cp /usr/lib64/libsqlite3.so.0 "${HOME}/build/system"
      shell: bash
      working-directory: /home/runner/src
      if: ${{ inputs.al_version == 'al2' }}
    - run: |
        cp /usr/lib64/libnssutil3.so "${HOME}/build/system"
        cp /usr/lib64/libexpat.so.1 "${HOME}/build/system"
        cp /usr/lib64/libfreebl3.so "${HOME}/build/system"
        cp /usr/lib64/libfreeblpriv3.so "${HOME}/build/system"
        cp /usr/lib64/libnspr4.so "${HOME}/build/system"
        cp /usr/lib64/libplc4.so "${HOME}/build/system"
        cp /usr/lib64/libplds4.so "${HOME}/build/system"
      shell: bash
      working-directory: /home/runner/src
      if: ${{ inputs.al_version == 'al2023' }}
    - run: |
        mkdir -p "${HOME}/build/chrome"
        strip -o "${HOME}/build/chrome/chrome" out/Default/chrome
        strip -o "${HOME}/build/chrome/chrome_sandbox" out/Default/chrome_sandbox
        strip -o "${HOME}/build/chrome/chrome_crashpad_handler" out/Default/chrome_crashpad_handler
        strip -o "${HOME}/build/chrome/libEGL.so" out/Default/libEGL.so
        strip -o "${HOME}/build/chrome/libGLESv2.so" out/Default/libGLESv2.so
        strip -o "${HOME}/build/chrome/libvulkan.so.1" out/Default/libvulkan.so.1
        strip -o "${HOME}/build/chrome/libvk_swiftshader.so" out/Default/libvk_swiftshader.so
        cp out/Default/chrome-wrapper "${HOME}/build/chrome"
        cp out/Default/icudtl.dat "${HOME}/build/chrome"
        cp -r out/Default/MEIPreload "${HOME}/build/chrome"
        cp out/Default/chrome_100_percent.pak "${HOME}/build/chrome"
        cp out/Default/chrome_200_percent.pak "${HOME}/build/chrome"
        cp -r out/Default/locales "${HOME}/build/chrome"
        cp -r out/Default/resources "${HOME}/build/chrome"
        cp out/Default/resources.pak "${HOME}/build/chrome"
        cp out/Default/product_logo_48.png "${HOME}/build/chrome"
        cp out/Default/vk_swiftshader_icd.json "${HOME}/build/chrome"
        cp out/Default/xdg-mime "${HOME}/build/chrome"
        cp out/Default/xdg-settings "${HOME}/build/chrome"
      shell: bash
      working-directory: /home/runner/src
    - run: |
        mkdir -p "${HOME}/build/headless_shell"
        strip -o "${HOME}/build/headless_shell/headless_shell" out/Default/headless_shell
        cp out/Default/headless_lib_data.pak "${HOME}/build/headless_shell"
        cp out/Default/headless_lib_strings.pak "${HOME}/build/headless_shell"
      shell: bash
      working-directory: /home/runner
    - run: |
        mkdir -p "${HOME}/build/chromedriver"
        strip -o "${HOME}/build/chromedriver/chromedriver" out/Default/chromedriver
        cp out/Default/LICENSE.chromedriver "${HOME}/build/chromedriver"
      shell: bash
      working-directory: /home/runner
    - run: |
        zip -r "system-${VERSION}-${RUNNER_LABEL/,/-}.zip" system
        zip -r "chrome-${VERSION}-${RUNNER_LABEL/,/-}.zip" chrome
        zip -r "headless_shell-${VERSION}-${RUNNER_LABEL/,/-}.zip" headless_shell
        zip -r "chromedriver-${VERSION}-${RUNNER_LABEL/,/-}.zip" chromedriver
      shell: bash
      working-directory: /home/runner/build
    - run: |
        aws s3 cp "system-${VERSION}-${RUNNER_LABEL/,/-}.zip" "s3://${BINARIES_BUCKET}"
        aws s3 cp "chrome-${VERSION}-${RUNNER_LABEL/,/-}.zip" "s3://${BINARIES_BUCKET}"
        aws s3 cp "headless_shell-${VERSION}-${RUNNER_LABEL/,/-}.zip" "s3://${BINARIES_BUCKET}"
        aws s3 cp "chromedriver-${VERSION}-${RUNNER_LABEL/,/-}.zip" "s3://${BINARIES_BUCKET}"
      shell: bash
      working-directory: /home/runner/build
