name: Compile
description: Compile Chromium
inputs:
  architecture:
    required: true
    type: string
  al_version:
    required: true
    type: string
runs:
  using: composite
  steps:
    # - run: git apply "${GITHUB_WORKSPACE}/assets/patches/source/ifunc-header-patch.patch"
    #   shell: bash
    #   working-directory: /home/runner/src  
    #   if: ${{ inputs.architecture == 'arm64' && inputs.al_version == 'al2' }}
    - run: sudo patch -p1 <"${GITHUB_WORKSPACE}/assets/patches/system/update-v4l2-linux-headers.patch1"
      shell: bash
      working-directory: /usr
      if: ${{ inputs.al_version == 'al2' }}
    - run: git apply "${GITHUB_WORKSPACE}/assets/patches/source/memory-tagging-not-supported.patch"
      shell: bash
      working-directory: /home/runner/src  
      if: ${{ inputs.architecture == 'arm64' && inputs.al_version == 'al2' }}
    - run: |
        sudo echo '#ifndef F_LINUX_SPECIFIC_BASE' >> /usr/include/fcntl.h
        sudo echo '#define F_LINUX_SPECIFIC_BASE 1024' >> /usr/include/fcntl.h
        sudo echo '#endif' >> /usr/include/fcntl.h
        sudo echo '#define F_ADD_SEALS (F_LINUX_SPECIFIC_BASE + 9)' >> /usr/include/fcntl.h
        sudo echo '#define F_GET_SEALS (F_LINUX_SPECIFIC_BASE + 10)' >> /usr/include/fcntl.h
        sudo echo '#define F_SEAL_SEAL 0x0001' >> /usr/include/fcntl.h
        sudo echo '#define F_SEAL_SHRINK 0x0002' >> /usr/include/fcntl.h
        sudo echo '#define F_SEAL_GROW 0x0004' >> /usr/include/fcntl.h
        sudo echo '#define F_SEAL_GROW 0x0004' >> /usr/include/fcntl.h
        sudo echo '#define F_SEAL_FUTURE_WRITE 0x0010' >> /usr/include/fcntl.h
      shell: bash
      working-directory: /home/runner/src  
      if: ${{ inputs.al_version == 'al2' }}
    - run: git apply "${GITHUB_WORKSPACE}/assets/patches/v8/disable-pku-jit-write-protect.patch"
      shell: bash
      working-directory: /home/runner/src/v8
      if: ${{ inputs.al_version == 'al2' }}
    - name: Create output dir
      shell: bash
      run: mkdir out/Default
      working-directory: /home/runner/src
    - name: Configure the build
      shell: bash
      run: cp "${GITHUB_WORKSPACE}/assets/args.gn" out/Default/args.gn
      working-directory: /home/runner/src
    - name: Disable PartitionAlloc
      shell: bash
      run: |
        echo "enable_pkeys = false" >> out/Default/args.gn
      working-directory: /home/runner/src
      if: ${{ inputs.al_version == 'al2' }}
    - name: Set up the build
      run: gn gen out/Default
      shell: bash
      working-directory: /home/runner/src
    - name: Build headless_shell
      run: autoninja -C out/Default headless_shell chrome chromedriver
      shell: bash
      working-directory: /home/runner/src