name: Compile
description: Compile Chromium
inputs:
  architecture:
    required: true
    type: string
  al_version:
    required: true
    type: string
runs:
  using: composite
  steps:
    # - run: git apply "${GITHUB_WORKSPACE}/assets/patches/source/ifunc-header-patch.patch"
    #   shell: bash
    #   working-directory: /home/runner/src  
    #   if: ${{ inputs.architecture == 'arm64' && inputs.al_version == 'al2' }}
    - run: sudo patch -p1 <"${GITHUB_WORKSPACE}/assets/patches/system/update-v4l2-linux-headers.patch1"
      shell: bash
      working-directory: /usr
      if: ${{ inputs.al_version == 'al2' }}
    - run: git apply "${GITHUB_WORKSPACE}/assets/patches/source/memory-tagging-not-supported.patch"
      shell: bash
      working-directory: /home/runner/src  
      if: ${{ inputs.architecture == 'arm64' && inputs.al_version == 'al2' }}
    - run: git apply "${GITHUB_WORKSPACE}/assets/patches/source/fix-undefined-seals.patch"
      shell: bash
      working-directory: /home/runner/src  
      if: ${{ inputs.al_version == 'al2' }}
    # - run: git apply "${GITHUB_WORKSPACE}/assets/patches/source/fix-v8-unused-function.v8-patch"
    #   shell: bash
    #   working-directory: /home/runner/src/v8
    #   if: ${{ inputs.al_version == 'al2' }}
    - run: git apply "${GITHUB_WORKSPACE}/assets/patches/v8/disable-pku-jit-write-protect.patch"
      shell: bash
      working-directory: /home/runner/src/v8
      if: ${{ inputs.al_version == 'al2' }}
    - name: Create output dir
      shell: bash
      run: mkdir out/Default
      working-directory: /home/runner/src
    - name: Configure the build
      shell: bash
      run: cp "${GITHUB_WORKSPACE}/assets/args.gn" out/Default/args.gn
      working-directory: /home/runner/src
    - name: Disable PartitionAlloc
      shell: bash
      run: |
        echo "enable_pkeys = false" >> out/Default/args.gn
      working-directory: /home/runner/src
      if: ${{ inputs.al_version == 'al2' }}
    - name: Set up the build
      run: gn gen out/Default
      shell: bash
      working-directory: /home/runner/src
    - name: Build headless_shell
      run: autoninja -C out/Default headless_shell chrome chromedriver
      shell: bash
      working-directory: /home/runner/src